(* ::Package:: *)

(* ::Input:: *)
(*(*****Functions for the polynomial approximations of probability density functions of compound distributions SCOR paper*****)*)
(*(*Polynomial Aproximation for a distribution having a moment generating function*)*)
(*PDFPolynomial[XDist_,r_,m_,K_,PrintCoef_]:=Module[{Coeffs,Polys,cgf,TaylorExpansioncgf,z},*)
(*(*Generating Function of the coefficients of the expansion*)*)
(*cgf=Function[{z},(1+z)^(-r)*MomentGeneratingFunction[XDist,z/m/(1+z)]];*)
(*(*Taylor Development arround 0 of the generating function of the coefficients*)*)
(*TaylorExpansioncgf=Function[{z},Normal[Series[cgf[z],{0,K}]]];*)
(*(*Coefficients of the expansion*)*)
(*Coeffs=Table[1/Sqrt[Binomial[i+r-1,i]]/(i!)*(D[TaylorExpansioncgf[z],{z,i}]/.z->0),{i,0,K}];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[PrintCoef,Print[N[Coeffs]]];*)
(*(*Orthonormal Generalized Laguerre Polynomials*)*)
(*Polys=Function[{x},Table[(-1)^n*LaguerreL[n,r-1,x/m]/Sqrt[Binomial[n+r-1,n]],{n,0,K}]];*)
(*Function[{x},Total[Coeffs*Polys[x]]*PDF[GammaDistribution[r,m],x]]*)
(*];*)
(*(*Polynomial Aproximation for a distribution having a moment generating function using Crude Monte Carlo to evaluate the coefficients of the expansion*)*)
(*(*Same function except that the coefficients are computed via Crude MonteCarlo with R replication*)*)
(*PDFPolynomialCMC[XDist_,R_,r_,m_,K_,PrintCoef_]:=Module[{Coeffs,Polys,RVs},*)
(*(*Monte Carlo sample of size R*)*)
(*RVs=RandomVariate[XDist,R];*)
(*(*Orthonormal Generalized Laguerre Polynomials*)*)
(*Polys=Function[{x},Table[(-1)^n*LaguerreL[n,r-1,x/m]/Sqrt[Binomial[n+r-1,n]],{n,0,K}]];*)
(*(*Coefficients of the expansion*)*)
(*Coeffs=Mean[Map[Polys[#]&,RVs]];*)
(*Print[Polys[0]];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[PrintCoef,Print[N[Coeffs]]];*)
(*Function[{x},Total[Coeffs*Polys[x]]*PDF[GammaDistribution[r,m],x]]*)
(*];*)
(*(*Polynomial approximation of a compound distribution associated to the random variable X=U_{1}+...+U_{N}*)*)
(*(*NDist= Distribution of N*)*)
(*(*UDist= Distribution of U*)*)
(*(*r= Shape parameter of the reference distribution*)*)
(*(*m= Mean parameter of the reference distribution*)*)
(*(*K= Order of truncation*)*)
(*(*Printcgf= Boolean that indicates if whether or not the generating function of the coeficients of the polynomial approximation should be printed*)*)
(*(*PrintCoef= Boolean that indicates if whether or not the coeficients of the polynomial approximation should be printed*)*)
(*PDFCompoundDistributionPolynomial[NDist_,UDist_,r_,m_,K_,Printcgf_,PrintCoef_]:=Module[{Coeffs,Polys,mgf,pgf,cgf,TaylorExpansioncgf,z,u},*)
(*(*Probability Generating Function of the distribution of N*)*)
(*pgf=Function[{s},FullSimplify[MomentGeneratingFunction[NDist,Log[s]]-PDF[NDist,0]]];*)
(*(*Moment Generating Function of the distribution of X*)mgf=Function[{s},pgf[MomentGeneratingFunction[UDist,s]]];*)
(*(*Generating Function of the coefficients of the expansion*)*)
(*cgf=Function[{z},FullSimplify[(1+z)^(-r)*mgf[z/m/(1+z)]]];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[Printcgf,Print[cgf[z]]];*)
(*(*Taylor Development arround 0 of the generating function of the coefficients*)*)
(*TaylorExpansioncgf=Function[{z},Normal[Series[cgf[z],{z,0,K}]]];*)
(*(*Coefficients of the expansion*)*)
(*Coeffs=Table[1/Sqrt[Binomial[i+r-1,i]]/(i!)*(D[TaylorExpansioncgf[z],{z,i}]/.z->0),{i,0,K}];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[PrintCoef,Print[N[Coeffs]]];*)
(*(*Orthonormal Generalized Laguerre Polynomials*)*)
(*Polys=Function[{x},Table[(-1)^n*LaguerreL[n,r-1,x/m]/Sqrt[Binomial[n+r-1,n]],{n,0,K}]];*)
(*Function[{x},Total[Coeffs*Polys[x]]*Exp[-x/m]*x^(r-1)/Gamma[r]/m^(r)]*)
(*];*)
(*(*Polynomial approximation of the CDF and the survival Function*)*)
(*(*Necessitate to get first an approximation of the PDF with PDFPolynomial and integrate it*)*)
(*(*PDFApproximation is the polynomial approximation of the PDF of the compound distribution*)*)
(*CDFCompoundDistributionPolynomial[PDFApproximation_,NDist_]:=*)
(*Function[{x},PDF[NDist,0]+Integrate[Simplify[PDFApproximation[y]],{y,0,x},Assumptions->x>0]];*)
(*SurvivalCompoundDistributionPolynomial[PDFApproximation_]:=*)
(*Function[{x},1-CDFCompoundDistributionPolynomial[PDFApproximation,NDist]];*)
(*(*Panjer's algorithm*)*)
(*(*Approximation for the PDF*)*)
(*(*h=Discretization step*)*)
(*(*u=Threshold up to which we compute the probability*)*)
(*PDFPanjer[NDist_,UDist_,h_,uMax_]:=Module[{PartitionGrid,UDistDiscretized,a,b,ProbaPanjer},*)
(*(*Generation of a dicrete grid storing the different points arround which the distribution of U is approximated*)*)
(*PartitionGrid=Table[k,{k,0,uMax,h}];*)
(*(*Dicretized PDF of U taking its values in the previous grid*)*)
(*UDistDiscretized=Table[N[CDF[UDist,Max[PartitionGrid[[i]]+h/2,0]]-CDF[UDist,Max[PartitionGrid[[i]]-h/2,0]]],{i,1,Length[PartitionGrid],1}];*)
(*(*Determination of the coefficients a and b in the Panjer's family recurrence relationship among probabilities*)*)
(*b=2(PDF[NDist,1]/PDF[NDist,0]-PDF[NDist,2]/PDF[NDist,1]);*)
(*a=PDF[NDist,1]/PDF[NDist,0]-b;*)
(*(*Formal application of Panjer's algorithm*)*)
(*ProbaPanjer={MomentGeneratingFunction[NDist,Log[UDistDiscretized[[1]]]]};*)
(*Do[AppendTo[ProbaPanjer,(1-a*UDistDiscretized[[1]])^(-1)Sum[(a+b*j/k)UDistDiscretized[[j/h+1]]ProbaPanjer[[(k-j)/h+1]],{j,h,k,h}]],{k,h,uMax,h}];*)
(*ProbaPanjer*)
(*];*)
(*(*Approximation for the CDF and the survival function, it is required to compute the probabilities through PDFPanjer*)*)
(*CDFPanjer[ListProbabilityPanjer_,h_]:=Function[{x},Sum[ListProbabilityPanjer[[j/h+1]],{j,0,x,h}]];*)
(*SurvivalPanjer[ListProbabilityPanjer_,h_]:=Function[{x},1-Sum[ListProbabilityPanjer[[j/h+1]],{j,0,x,h}]];*)
(*(*Exponential moments technique, the Mnatsakanov way*)*)
(*(*Approximation for the PDF*)*)
(*(*\[Alpha] indicates the number of exponential moments to incorporate in the approximation, the more there are the better is the approximation*)*)
(*(*b is a the scaling parameter for the exponential moments*)*)
(*PDFExponentialMoments[NDist_,UDist_,\[Alpha]_,b_]:=Module[{LaplaceT},*)
(*LaplaceT=Function[{s},MomentGeneratingFunction[NDist,Log[MomentGeneratingFunction[UDist,-s]]]];*)
(*Function[{y},Floor[\[Alpha]*b^(-y)]*Log[b]*Gamma[\[Alpha]+2]/\[Alpha]/Gamma[Floor[\[Alpha]*b^(-y)]+1]*Sum[*)
(*(-1)^(m)*LaplaceT[(m+Floor[\[Alpha]*b^(-y)])*Log[b]]/m!/(\[Alpha]-Floor[\[Alpha]*b^(-y)]-m)!*)
(*,{m,0,\[Alpha]-Floor[\[Alpha]*b^(-y)],1}]]*)
(*];*)
(*(*Same thing but for the CDF*)*)
(*CDFExponentialMoments[NDist_,UDist_,\[Alpha]_,b_]:=Module[{LaplaceT},*)
(*LaplaceT=Function[{s},MomentGeneratingFunction[NDist,Log[MomentGeneratingFunction[UDist,-s]]]];*)
(*Function[{y},1-Sum[Sum[*)
(*Binomial[\[Alpha],j]*Binomial[j,k]*(-1)^(j-k)*LaplaceT[j*Log[b]]*)
(*,{j,k,\[Alpha],1}],{k,0,Floor[\[Alpha]*b^(-y)],1}]]*)
(*];*)
(*(*And the survival function*)*)
(*SurvivalExponentialMoments[NDist_,UDist_,\[Alpha]_,b_]:=Module[{LaplaceT},*)
(*LaplaceT=Function[{s},MomentGeneratingFunction[NDist,Log[MomentGeneratingFunction[UDist,-s]]]];*)
(*Function[{y},Sum[Sum[*)
(*Binomial[\[Alpha],j]*Binomial[j,k]*(-1)^(j-k)*LaplaceT[j*Log[b]]*)
(*,{j,k,\[Alpha],1}],{k,0,Floor[\[Alpha]*b^(-y)],1}]]*)
(*];*)
(*(*A practical adjustment when using the exponential moment technique is to evaluate the approximation on a grid and interpolates the point to get a final approximation*)*)
(*(*For the PDF*)*)
(*PDFExponentialMomentsInterpolated[NDist_,UDist_,\[Alpha]_,b_]:=Module[{GridValues,ExpMomPDFValues,ExpMomPDFApproximation},*)
(*(*Definition of the lattice grid*)*)
(*GridValues=Table[Log[\[Alpha]/(\[Alpha]-i+1)]/Log[b],{i,1,\[Alpha]}];*)
(*(*Exponential Moment Approximation of the PDF*)*)
(*ExpMomPDFApproximation=PDFExponentialMoments[NDist,UDist,\[Alpha],b];*)
(*(*Value taken by the approximation over the lattice grid*)*)
(*ExpMomPDFValues=Table[{GridValues[[i]],ExpMomPDFApproximation[GridValues[[i]]]},{i,1,\[Alpha]}];*)
(*(*Linear Interpolation of the values*)*)
(*Interpolation[ExpMomPDFValues,InterpolationOrder->1]*)
(*];*)
(*(*For the CDF*)*)
(*CDFExponentialMomentsInterpolated[NDist_,UDist_,\[Alpha]_,b_]:=Module[{GridValues,ExpMomCDFValues,ExpMomCDFApproximation},*)
(*(*Definition of the lattice grid*)*)
(*GridValues=Table[Log[\[Alpha]/(\[Alpha]-i+1)]/Log[b],{i,1,\[Alpha]}];*)
(*(*Exponential Moment Approximation of the CDF*)*)
(*ExpMomCDFApproximation=CDFExponentialMoments[NDist,UDist,\[Alpha],b];*)
(*(*Value taken by the approximation over the lattice grid*)*)
(*ExpMomCDFValues=Table[{GridValues[[i]],ExpMomCDFApproximation[GridValues[[i]]]},{i,1,\[Alpha]}];*)
(*(*Linear Interpolation of the values*)*)
(*Interpolation[ExpMomCDFValues,InterpolationOrder->1]*)
(*];*)
(*(*For the Survival*)*)
(*SurvivalExponentialMomentsInterpolated[NDist_,UDist_,\[Alpha]_,b_]:=Module[{GridValues,ExpMomSurvivalValues,ExpMomSurvivalApproximation},*)
(*(*Definition of the lattice grid*)*)
(*GridValues=Table[Log[\[Alpha]/(\[Alpha]-i+1)]/Log[b],{i,1,\[Alpha]}];*)
(*(*Exponential Moment Approximation of the Survival function*)*)
(*ExpMomSurvivalApproximation=SurvivalExponentialMoments[NDist,UDist,\[Alpha],b];*)
(*(*Value taken by the approximation over the lattice grid*)*)
(*ExpMomSurvivalValues=Table[{GridValues[[i]],ExpMomSurvivalApproximation[GridValues[[i]]]},{i,1,\[Alpha]}];*)
(*(*Linear Interpolation of the values*)*)
(*Interpolation[ExpMomSurvivalValues,InterpolationOrder->1]*)
(*];*)
(*(*The Direct Fourier Transform Inversion Technique*)*)
(*SurvivalInverseFourier[NDist_,UDist_,a_,K_,M_]:=Module[{SurvivalLaplaceT,Summands},*)
(*SurvivalLaplaceT=Function[{s},(1-MomentGeneratingFunction[NDist,Log[MomentGeneratingFunction[UDist,-s]]])/s];*)
(*Summands=Function[{x,k},Exp[a/2]/2/x*Re[SurvivalLaplaceT[a/2/x]]-Exp[a/2]/x*Sum[(-1)^(i+1)*Re[SurvivalLaplaceT[(a+I*i*2\[Pi])/2/x]],{i,1,k,1}]];*)
(*Function[{x},Sum[Binomial[M,m]*2^(-M)Summands[x,K+m],{m,0,M,1}]]*)
(*]*)
(*(****Computation of the ultimate ruin probability in the compound Poisson ruin model****)*)
(*(*The ultimate ruin probability in that case is equal to the survival function of a geometric compound distribution*)*)
(*(*\[Lambda]=Intensity of the Poisson process that governs the claim arrival*)*)
(*(*c=Rate at which the premiums are collected*)*)
(*(*UDist= Distribution of U*)*)
(*(*r= Shape parameter of the reference distribution*)*)
(*(*m= Mean parameter of the reference distribution*)*)
(*(*K= Order of truncation*)*)
(*(*Printcgf= Boolean that indicates if whether or not the generating function of the coeficients of the polynomial approximation should be printed*)*)
(*(*PrintCoef= Boolean that indicates if whether or not the coeficients of the polynomial approximation should be printed*)*)
(*PDFRuinProbabilityPolynomial[\[Lambda]_,c_,UDist_,r_,m_,K_,Printcgf_,PrintCoef_]:=Module[{Coeffs,Polys,mgf,pgf,cgf,TaylorExpansioncgf,z,u,\[Rho]},*)
(*(*Parametr of the underwriting geometric distribution*)*)
(*\[Rho]=\[Lambda]*Mean[UDist]/c;*)
(*(*Probability Generating Function of the geometric distribution with parameter \[Rho]*)*)
(*pgf=Function[{s},FullSimplify[MomentGeneratingFunction[GeometricDistribution[1-\[Rho]],Log[s]]-PDF[GeometricDistribution[1-\[Rho]],0]]];*)
(*(*Moment Generating Function of the geometric compound distribution*)mgf=Function[{s},pgf[(MomentGeneratingFunction[UDist,s]-1)/s/Mean[UDist]]];*)
(*(*Generating Function of the coefficients of the expansion*)*)
(*cgf=Function[{z},FullSimplify[(1+z)^(-r)*mgf[z/m/(1+z)]]];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[Printcgf,Print[cgf[z]]];*)
(*(*Taylor Development arround 0 of the generating function of the coefficients*)*)
(*TaylorExpansioncgf=Function[{z},Normal[Series[cgf[z],{z,0,K}]]];*)
(*(*Coefficients of the expansion*)*)
(*Coeffs=Table[1/Sqrt[Binomial[i+r-1,i]]/(i!)*(D[TaylorExpansioncgf[z],{z,i}]/.z->0),{i,0,K}];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[PrintCoef,Print[N[Coeffs]]];*)
(*(*Orthonormal Generalized Laguerre Polynomials*)*)
(*Polys=Function[{x},Table[(-1)^n*LaguerreL[n,r-1,x/m]/Sqrt[Binomial[n+r-1,n]],{n,0,K}]];*)
(*Function[{x},Total[Coeffs*Polys[x]]*PDF[GammaDistribution[r,m],x]]*)
(*];*)
(*(*Polynomial Aproximation of the ultimate ruin probability*)*)
(*(*The Polynomial approximation of the underwriting defective PDF is required*)*)
(*RuinProbabilityPolynomial[RuinProbaPDF_]:=Function[{x},Evaluate[Integrate[RuinProbaPDF[y],{y,x,+\[Infinity]},Assumptions->x>0]]];*)
(*(*Panjer's algorithm approximation of the ultimate ruin probability*)*)
(*(*Approximation for the PDF*)*)
(*(*h=Discretization step*)*)
(*(*u=Threshold up to which we compute the probability*)*)
(*PDFRuinProbabilityPanjer[\[Lambda]_,c_,UDist_,h_,uMax_]:=Module[{PartitionGrid,UIDistDiscretized,a,b,ProbaPanjer,\[Rho],CDFUI},*)
(*(*Parametr of the underwriting geometric distribution*)*)
(*\[Rho]=\[Lambda]*Mean[UDist]/c;*)
(*(*Definition of the CDF of the equilibrium distribution of the U_i's*)*)
(*CDFUI=Function[{x},Integrate[SurvivalFunction[UDist,y],{y,0,x}]/Mean[UDist]];*)
(*(*Generation of a dicrete grid storing the different points arround which the distribution of U is approximated*)*)
(*PartitionGrid=Table[k,{k,0,uMax,h}];*)
(*(*Dicretized PDF of U taking its values in the previous grid*)*)
(*UIDistDiscretized=Table[N[CDFUI[Max[PartitionGrid[[i]]+h/2,0]]-CDFUI[Max[PartitionGrid[[i]]-h/2,0]]],{i,1,Length[PartitionGrid],1}];*)
(*(*Determination of the coefficients a and b in the Panjer's family recurrence relationship among probabilities*)*)
(*b=2(PDF[GeometricDistribution[1-\[Rho]],1]/PDF[GeometricDistribution[1-\[Rho]],0]-PDF[GeometricDistribution[1-\[Rho]],2]/PDF[GeometricDistribution[1-\[Rho]],1]);*)
(*a=PDF[GeometricDistribution[1-\[Rho]],1]/PDF[GeometricDistribution[1-\[Rho]],0]-b;*)
(*(*Formal application of Panjer's algorithm*)*)
(*ProbaPanjer={MomentGeneratingFunction[GeometricDistribution[1-\[Rho]],Log[UIDistDiscretized[[1]]]]};*)
(*Do[AppendTo[ProbaPanjer,(1-a*UIDistDiscretized[[1]])^(-1)Sum[(a+b*j/k)UIDistDiscretized[[j/h+1]]ProbaPanjer[[(k-j)/h+1]],{j,h,k,h}]],{k,h,uMax,h}];*)
(*ProbaPanjer*)
(*];*)
(*(*Approximation for the CDF and the survival function, it is required to compute the probabilities through PDFPanjer*)*)
(*CDFRuinProbabilityPanjer[ListProbabilityPanjer_,h_]:=Function[{x},Sum[ListProbabilityPanjer[[j/h+1]],{j,0,x,h}]];*)
(*RuinProbabilityPanjer[ListProbabilityPanjer_,h_]:=Function[{x},1-Sum[ListProbabilityPanjer[[j/h+1]],{j,0,x,h}]];*)
(*(*Exponential Moments technique for the ultimate ruin probability*)*)
(*(*Approximation for the Ultimate ruin probability*)*)
(*(*\[Alpha] indicates the number of exponential moments to incorporate in the approximation, the more there are the better is the approximation*)*)
(*(*b is a the scaling parameter for the exponential moments*)*)
(*RuinProbabilityExponentialMoments[\[Lambda]_,c_,UDist_,\[Alpha]_,b_]:=Module[{LaplaceTRuinProba,\[Rho]},*)
(*\[Rho]=\[Lambda]*Mean[UDist]/c;*)
(*LaplaceTRuinProba=Function[{s},1/s-(1-\[Rho])/(s-\[Lambda]*(1-MomentGeneratingFunction[UDist,-s])/c)];*)
(*Function[{y},Floor[\[Alpha]*b^(-y)]*Log[b]*Gamma[\[Alpha]+2]/\[Alpha]/Gamma[Floor[\[Alpha]*b^(-y)]+1]*Sum[*)
(*(-1)^(m)*LaplaceTRuinProba[(m+Floor[\[Alpha]*b^(-y)])*Log[b]]/m!/(\[Alpha]-Floor[\[Alpha]*b^(-y)]-m)!*)
(*,{m,0,\[Alpha]-Floor[\[Alpha]*b^(-y)],1}]]*)
(*];*)
(*(*A practical adjustment when using the exponential moment technique is to evaluate the approximation on a grid and interpolates the point to get a final approximation*)*)
(*(*For the PDF*)*)
(*RuinProbabilityExponentialMomentsInterpolated[\[Lambda]_,c_,UDist_,\[Alpha]_,b_]:=Module[{GridValues,ExpMomRuinProbaValues,ExpMomRuinProbaApproximation},*)
(*(*Definition of the lattice grid*)*)
(*GridValues=Table[Log[\[Alpha]/(\[Alpha]-i+1)]/Log[b],{i,1,\[Alpha]}];*)
(*(*Exponential Moment Approximation of the PDF*)*)
(*ExpMomRuinProbaApproximation=RuinProbabilityExponentialMoments[\[Lambda],c,UDist,\[Alpha],b];*)
(*(*Value taken by the approximation over the lattice grid*)*)
(*ExpMomRuinProbaValues=Table[{GridValues[[i]],ExpMomRuinProbaApproximation[GridValues[[i]]]},{i,1,\[Alpha]}];*)
(*(*Linear Interpolation of the values*)*)
(*Interpolation[ExpMomRuinProbaValues,InterpolationOrder->1]*)
(*];*)
(*(*The Direct Fourier Transform Inversion Technique for the ultimate ruin probability*)*)
(*RuinProbabilityInverseFourier[\[Lambda]_,c_,UDist_,a_,K_,M_]:=Module[{RuinProbaLaplaceT,LaplaceTUI,Summands,\[Rho]},*)
(*\[Rho]=\[Lambda]*Mean[UDist]/c;*)
(*(*Laplace transform of the equilibrium distribution of the U_i's*)*)
(*(*Moment Generating Function of the geometric compound distribution*)LaplaceTUI=Function[{s},(MomentGeneratingFunction[UDist,-s]-1)/(-s)/Mean[UDist]];*)
(*RuinProbaLaplaceT=Function[{s},(1-MomentGeneratingFunction[GeometricDistribution[1-\[Rho]],Log[LaplaceTUI[s]]])/s];*)
(*Summands=Function[{x,k},Exp[a/2]/2/x*Re[RuinProbaLaplaceT[a/2/x]]-Exp[a/2]/x*Sum[(-1)^(i+1)*Re[RuinProbaLaplaceT[(a+I*i*2\[Pi])/2/x]],{i,1,k,1}]];*)
(*Function[{x},Sum[Binomial[M,m]*2^(-M)Summands[x,K+m],{m,0,M,1}]]*)
(*];*)
(*(*****Polynomial approximation extension to the Bivariate case*****)*)
(*(*Application to a bivariate Compound distribution*)*)
(*(*Polynomial approximation of a compound distribution associated to the random vector X=(X_{1},X_{2})=(U_11+...+U_1N,U_21+...+U_2N*)*)
(*(*NDist= Distribution of N*)*)
(*(*MGFU= Multivariate moment generating function of the vector U*)*)
(*(*r= Vector of shape parameters of the reference distribution*)*)
(*(*m= Vector of mean parameter of the reference distribution*)*)
(*(*K= Vector of Order of truncation*)*)
(*(*Printcgf= Boolean that indicates if whether or not the generating function of the coeficients of the polynomial approximation should be printed*)*)
(*(*PrintCoef= Boolean that indicates if whether or not the coeficients of the polynomial approximation should be printed*)*)
(*PDFBivariateCompoundDistributionPolynomial[NDist_,MGFU_,r_,m_,K_,Printcgf_,PrintCoef_]:=Module[{Coeffs,Polys,mgf,pgf,cgf,TaylorExpansioncgf,z,u},*)
(*(*Probability Generating Function of the distribution of N*)*)
(*pgf=Function[{s},FullSimplify[MomentGeneratingFunction[NDist,Log[s]]-PDF[NDist,0]]];*)
(*(*Moment Generating Function of the distribution of X*)mgf=Function[{s1,s2},pgf[MGFU[s1,s2]]];*)
(*(*Generating Function of the coefficients of the expansion*)*)
(*cgf=Function[{z1,z2},FullSimplify[(1+z1)^(-r[[1]])*(1+z2)^(-r[[2]])*mgf[z1/m[[1]]/(1+z1),z2/m[[2]]/(1+z2)]]];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[Printcgf,Print[cgf[z1,z2]]];*)
(*(*Taylor Development arround 0 of the generating function of the coefficients*)*)
(*TaylorExpansioncgf=Function[{z1,z2},Normal[Series[Normal[Series[cgf[z1,z2],{z1,0,K[[1]]}]],{z2,0,K[[2]]}]]];*)
(*(*Coefficients of the expansion*)*)
(*Coeffs=Table[Table[1/Sqrt[Binomial[i+r[[1]]-1,i]]/Sqrt[Binomial[j+r[[2]]-1,j]]/(i!)/(j!)*(D[D[*)
(*TaylorExpansioncgf[z1,z2],{z1,i}],{z2,j}]/.z1->0/.z2->0)*)
(*,{i,0,K[[1]]}],{j,0,K[[2]]}];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[PrintCoef,Print[N[Coeffs]]];*)
(*(*Bivariate Orthonormal Generalized Laguerre Polynomials*)*)
(*Polys=Function[{x1,x2},Table[(-1)^(i+j)*LaguerreL[i,r[[1]]-1,x1/m[[1]]]*LaguerreL[j,r[[2]]-1,x2/m[[2]]]/Sqrt[Binomial[i+r[[1]]-1,i]]/Sqrt[Binomial[j+r[[2]]-1,j]],{i,0,K[[1]]},{j,0,K[[2]]}]];*)
(*(*Polnomial aproximation of the joint PDF*)*)
(*Function[{x1,x2},Total[Total[Coeffs*Polys[x1,x2]]]*PDF[GammaDistribution[r[[1]],m[[1]]],x1]*PDF[GammaDistribution[r[[2]],m[[2]]],x2]]*)
(*];*)
(*(*Particular case of claim sizes DBVE distributed*)*)
(*(*NDist= Distribution of N*)*)
(*(*\[Alpha]= "shape" parameter*)*)
(*(*\[Mu]1= "Mean" parameter for the first component*)*)
(*(*\[Mu]2= "Mean" parameter for the second component*)*)
(*(*\[Rho]= Correlation parameter*)*)
(*(*r= Vector of shape parameters of the reference distribution*)*)
(*(*m= Vector of mean parameter of the reference distribution*)*)
(*(*K= Vector of Order of truncation*)*)
(*(*Printcgf= Boolean that indicates if whether or not the generating function of the coeficients of the polynomial approximation should be printed*)*)
(*(*PrintCoef= Boolean that indicates if whether or not the coeficients of the polynomial approximation should be printed*)*)
(*PDFBivariateCompoundDistributionDBVEPolynomial[NDist_,\[Alpha]_,\[Mu]1_,\[Mu]2_,\[Rho]_,r_,m_,K_,Printcgf_,PrintCoef_]:=Module[{Coeffs,Polys,mgf,pgf,cgf,TaylorExpansioncgf,z1,z2,u},*)
(*(*Probability Generating Function of the distribution of N*)*)
(*pgf=Function[{s},FullSimplify[MomentGeneratingFunction[NDist,Log[s]]-PDF[NDist,0]]];*)
(*(*Moment Generating Function of the distribution of X*)*)
(*mgf=Function[{s1,s2},pgf[*)
(*(\[Mu]1*\[Mu]2/((\[Mu]1-s1)(\[Mu]2-s2)-\[Rho]*s1*s2))^(\[Alpha])(*Bivariate Moment Generating function of the DBVE distribution*)*)
(*]];*)
(*(*Generating Function of the coefficients of the expansion*)*)
(*cgf=Function[{z1,z2},FullSimplify[(1+z1)^(-r[[1]])*(1+z2)^(-r[[2]])*mgf[z1/m[[1]]/(1+z1),z2/m[[2]]/(1+z2)]]];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[Printcgf,Print[cgf[z1,z2]]];*)
(*(*Taylor Development arround 0 of the generating function of the coefficients*)*)
(*TaylorExpansioncgf=Function[{z1,z2},Normal[Series[Normal[Series[cgf[z1,z2],{z1,0,K[[1]]}]],{z2,0,K[[2]]}]]];*)
(*(*Coefficients of the expansion*)*)
(*Coeffs=Table[Table[1/Sqrt[Binomial[i+r[[1]]-1,i]]/Sqrt[Binomial[j+r[[2]]-1,j]]/(i!)/(j!)*(D[D[*)
(*TaylorExpansioncgf[z1,z2],{z1,i}],{z2,j}]/.z1->0/.z2->0)*)
(*,{i,0,K[[1]]}],{j,0,K[[2]]}];*)
(*(*To Print the coefficients or not to print the coefficients*)*)
(*If[PrintCoef,Print[N[Coeffs]]];*)
(*(*Bivariate Orthonormal Generalized Laguerre Polynomials*)*)
(*Polys=Function[{x1,x2},Table[(-1)^(i+j)*LaguerreL[i,r[[1]]-1,x1/m[[1]]]*LaguerreL[j,r[[2]]-1,x2/m[[2]]]/Sqrt[Binomial[i+r[[1]]-1,i]]/Sqrt[Binomial[j+r[[2]]-1,j]],{i,0,K[[1]]},{j,0,K[[2]]}]];*)
(*(*Polnomial aproximation of the joint PDF*)*)
(*Function[{x1,x2},Total[Total[Coeffs*Polys[x1,x2]]]*PDF[GammaDistribution[r[[1]],m[[1]]],x1]*PDF[GammaDistribution[r[[2]],m[[2]]],x2]]*)
(*];*)
(*(*Polynomial Approximation for the joint survival function of a bivariated DBVE compound distribution*)*)
(*SurvivalBivariateCompoundDistributionDBVEPolynomial[BivariatePDFPoly_,NDist_]:=Function[{x1,x2},Evaluate[Integrate[Integrate[BivariatePDFPoly[y1,y2],{y1,x1,+\[Infinity]},Assumptions->x1>0],{y2,x2,+\[Infinity]},Assumptions->x2>0]]];*)
(*(*Simulation from a DBVE distribution*)*)
(*DBVESimulation[\[Alpha]_,\[Mu]1_,\[Mu]2_,\[Rho]_,R_]:=Module[{NegBinRVs},*)
(*NegBinRVs=\[Alpha]+RandomVariate[NegativeBinomialDistribution[\[Alpha],1-\[Rho]],R];*)
(*Table[{RandomVariate[GammaDistribution[NegBinRVs[[k]],(1-\[Rho])/\[Mu]1]],RandomVariate[GammaDistribution[NegBinRVs[[k]],(1-\[Rho])/\[Mu]2]]},{k,1,R}]*)
(*];*)
(*(*Simulation from a compound distribution with DBVE claim sizes*)*)
(*(*R=Number of replications to produce*)*)
(*CompoundDistributionDBVESimulation[NDist_,\[Alpha]_,\[Mu]1_,\[Mu]2_,\[Rho]_,R_]:=Module[{RVsTemp1,RVsTemp2,Number0},*)
(*RVsTemp1=Table[Total[DBVESimulation[\[Alpha],\[Mu]1,\[Mu]2,\[Rho],RandomVariate[NDist]]],{i,1,R,1}];*)
(*Number0=Count[RVsTemp1,0];*)
(*RVsTemp2=DeleteCases[RVsTemp1,0];*)
(*If[Number0>0,Do[AppendTo[RVsTemp2,{0,0}],{j,1,Number0}]];*)
(*If[Number0>0,RVsTemp2,RVsTemp1]*)
(*]*)
(**)
(*(*MonteCarlo approximation for the joint survival function*)*)
(*SurvivalCompoundDistributionDBVEMonteCarlo[RVs_]:=Function[{x1,x2},SurvivalFunction[EmpiricalDistribution[RVs],{x1,x2}]];*)
(*(*Survival Function of the risk exposure of the reinsurance company after proposing to each insurer a stop loss reinsurance treaty with retention level c and limit b*)*)
(*ZSurvivalMonteCarlo[RVs_,b1_,c1_,b2_,c2_]:=Module[{ZRVs},*)
(*ZRVs=Table[Min[Max[RVs[[k,1]]-c1,0],b1]+Min[Max[RVs[[k,2]]-c2,0],b2] ,{k,1,Length[RVs]}];*)
(*Function[{z},SurvivalFunction[EmpiricalDistribution[ZRVs],z]]*)
(*];*)
(*(*Benchmark Survival Function for the compound Poisson/Gamma case*)*)
(*NaiveSurvivalCompoundPoissonGamma=Function[{u,\[Lambda],\[Alpha],\[Beta],KBenchmark},*)
(*Sum[Exp[-\[Lambda]]*\[Lambda]^(k)/k!*SurvivalFunction[GammaDistribution[k*\[Alpha],\[Beta]],u],{k,1,KBenchmark}]*)
(*];*)
(*(*Usual Stop loss premium via Monte Carlo*)*)
(*UsualStopLossPremiumMonteCarlo[NDist_,UDist_,R_]:=Module[{RVs},*)
(*RVs=Table[Total[RandomVariate[UDist,RandomVariate[NDist]]],{k,1,R}];*)
(*Function[{c},Total[Select[RVs-c,#>0&]]/R]*)
(*];*)
(*(*CDFCompoundDistributionPolynomial[PDFApproximation_,NDist_]:=*)
(*Function[{x},PDF[NDist,0]+Integrate[Simplify[PDFApproximation[y]],{y,0,x}(*,Assumptions\[Rule]x>0*)]];*)
(*SurvivalCompoundDistributionPolynomial[PDFApproximation_]:=*)
(*Function[{x},1-CDFCompoundDistributionPolynomial[PDFApproximation,NDist]];*)*)
(*(*Stop Loss premium computation using polynomials *)
(*UsualStopLossCompoundPoissonPoly=Mean[NDist]*Mean[UDist]-c+c*PDF[NDist,0]-Integrate[(x-c)*PDFApproximation[x],{x,0,c}];*)*)
(*(*Code to Handle lack of precision evaluating the polynomial approximation for high order of truncation using Plot*)
(*Block[{$MaxExtraPrecision=1000},SetPrecision[#,30]&/@Plot[N[SurvivalPoly,{Infinity,30}],{x,0,1000}]]*)
(**)*)
(**)
